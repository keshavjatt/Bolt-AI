const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const CodegenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode=model.startChat({
      generationConfig: CodegenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate to do app :\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags."},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Beautiful To-Do App with Analytics\",\n  \"explanation\": \"This React project implements a visually appealing and functional to-do application. It uses Tailwind CSS for styling, lucide-react for icons, date-fns for date formatting, and react-chartjs-2 for data visualization of task completion. The app includes components for task listing, adding new tasks, displaying statistics with charts, and managing user settings.It aims to provide an intuitive user experience with a focus on visual appeal and productive task management.ü•≥\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport AddTask from './components/AddTask';\\nimport Statistics from './components/Statistics';\\nimport Settings from './components/Settings';\\nimport { Home, Settings as SettingIcon, Plus, Menu } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n  const [view, setView] = useState('home');\\n  const [showSidebar, setShowSidebar] = useState(false);\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, { ...newTask, id: Date.now(), completed: false, createdAt: new Date() }]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  const today = format(new Date(), 'EEEE, MMMM do');\\n\\n  const renderView = () => {\\n    switch (view) {\\n      case 'home':\\n        return (\\n          <div>\\n            <h2 className=\\\"text-2xl font-bold mb-4\\\">Today is {today} ‚òÄÔ∏è</h2>\\n            <TaskList tasks={tasks} toggleComplete={toggleComplete} deleteTask={deleteTask} />\\n          </div>\\n        );\\n      case 'statistics':\\n        return <Statistics tasks={tasks} />;\\n      case 'settings':\\n        return <Settings />;\\n      default:\\n        return <p>Page not found</p>;\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"flex h-screen bg-gray-100\\\">\\n      {/* Sidebar */}\\n      <div className={`bg-white w-64 flex-shrink-0 p-4 space-y-4 transition-transform duration-300 transform ${showSidebar ? 'translate-x-0' : '-translate-x-full'} md:translate-x-0`}>\\n        <div className=\\\"font-bold text-xl\\\">TaskMaster üöÄ</div>\\n        <button onClick={() => setView('home')} className=\\\"flex items-center space-x-2 hover:text-blue-500\\\">\\n          <Home className=\\\"h-5 w-5\\\" /> <span>Home</span>\\n        </button>\\n        <button onClick={() => setView('statistics')} className=\\\"flex items-center space-x-2 hover:text-blue-500\\\">\\n          <img src=\\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\\" className=\\\"h-5 w-5\\\"/> <span>Statistics</span>\\n        </button>\\n        <button onClick={() => setView('settings')} className=\\\"flex items-center space-x-2 hover:text-blue-500\\\">\\n          <SettingIcon className=\\\"h-5 w-5\\\" /> <span>Settings</span>\\n        </button>\\n        {/* Mobile close button */}\\n        <button onClick={() => setShowSidebar(false)} className=\\\"md:hidden absolute top-4 right-4\\\">\\n          X\\n        </button>\\n      </div>\\n\\n      {/* Main Content */}\\n      <div className=\\\"flex-1 p-4 overflow-y-auto\\\">\\n        {/* Mobile menu button */}\\n        <button onClick={() => setShowSidebar(true)} className=\\\"md:hidden mb-4\\\">\\n          <Menu />\\n        </button>\\n        {renderView()}\\n        <AddTask addTask={addTask} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/AddTask.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction AddTask({ addTask }) {\\n  const [text, setText] = useState('');\\n  const [dueDate, setDueDate] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim() === '') return;\\n    addTask({ text, dueDate });\\n    setText('');\\n    setDueDate('');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mt-4\\\">\\n      <div className=\\\"flex space-x-2\\\">\\n        <input\\n          type=\\\"text\\\"\\n          placeholder=\\\"Add a task...‚úçÔ∏è\\\"\\n          value={text}\\n          onChange={(e) => setText(e.target.value)}\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n        />\\n        <input\\n          type=\\\"date\\\"\\n          value={dueDate}\\n          onChange={(e) => setDueDate(e.target.value)}\\n          className=\\\"shadow appearance-none border rounded w-auto py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n        />\\n        <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n          <Plus className=\\\"inline-block h-5 w-5 mr-2\\\" />Add\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default AddTask;\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Check } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TaskList({ tasks, toggleComplete, deleteTask }) {\\n  return (\\n    <ul className=\\\"space-y-2\\\">\\n      {tasks.map(task => (\\n        <li key={task.id} className=\\\"flex items-center justify-between bg-white shadow rounded p-3\\\">\\n          <div>\\n            <input\\n              type=\\\"checkbox\\\"\\n              checked={task.completed}\\n              onChange={() => toggleComplete(task.id)}\\n              className=\\\"mr-2 leading-tight\\\"\\n            />\\n            <span className={task.completed ? 'line-through text-gray-500' : 'text-gray-700'}>\\n              {task.text}\\n            </span>\\n            {task.dueDate && (\\n              <span className=\\\"text-sm text-gray-500 ml-2\\\">Due: {format(new Date(task.dueDate), 'MM/dd/yyyy')}</span>\\n            )}\\n          </div>\\n          <div>\\n            <button onClick={() => deleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700\\\">\\n              <Trash className=\\\"h-4 w-4\\\" />\\n            </button>\\n          </div>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TaskList;\\n\"\n    },\n    \"/components/Statistics.js\": {\n      \"code\": \"import React from 'react';\\nimport { Pie } from 'react-chartjs-2';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction Statistics({ tasks }) {\\n  const completedTasks = tasks.filter(task => task.completed).length;\\n  const incompleteTasks = tasks.length - completedTasks;\\n\\n  const data = {\\n    labels: ['Completed', 'Incomplete'],\\n    datasets: [\\n      {\\n        label: 'Task Completion',\\n        data: [completedTasks, incompleteTasks],\\n        backgroundColor: [\\n          'rgba(54, 162, 235, 0.8)',\\n          'rgba(255, 99, 132, 0.8)',\\n        ],\\n        borderWidth: 0,\\n      },\\n    ],\\n  };\\n\\n  const options = {\\n    plugins: {\\n      legend: {\\n        position: 'bottom',\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow rounded p-4\\\">\\n      <h2 className=\\\"text-xl font-bold mb-4\\\">Statistics üìä</h2>\\n      <Pie data={data} options={options} />\\n      <p className=\\\"text-center mt-4 text-gray-600\\\">You have completed {completedTasks} tasks and have {incompleteTasks} remaining. Keep up the great work! üí™</p>\\n    </div>\\n  );\\n}\\n\\nexport default Statistics;\\n\"\n    },\n    \"/components/Settings.js\": {\n      \"code\": \"import React from 'react';\\n\\nfunction Settings() {\\n  return (\\n    <div className=\\\"bg-white shadow rounded p-4\\\">\\n      <h2 className=\\\"text-xl font-bold mb-4\\\">Settings ‚öôÔ∏è</h2>\\n      <p className=\\\"text-gray-700\\\">Customize your preferences here.</p>\\n      {/* Add settings options later */}\\n       <img src=\\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\\" alt=\\\"Placeholder Image\\\"/>\\n    </div>\\n  );\\n}\\n\\nexport default Settings;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/AddTask.js\",\n    \"/components/TaskList.js\",\n    \"/components/Statistics.js\",\n    \"/components/Settings.js\"\n  ]\n}\n```"},
          ],
        },
      ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());